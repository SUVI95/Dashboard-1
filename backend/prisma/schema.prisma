generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  passwordHash     String?        @map("password_hash")
  role             UserRole       @default(CANDIDATE)
  emailVerified    Boolean        @default(false) @map("email_verified")
  twoFactorEnabled Boolean        @default(false) @map("two_factor_enabled")
  encryptionKeyId  String?        @map("encryption_key_id")
  googleId         String?        @unique @map("google_id")
  linkedinId       String?        @unique @map("linkedin_id")
  deletedAt        DateTime?      @map("deleted_at")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  aiTasks          AiTask[]
  applications     Application[]
  auditLogs        AuditLog[]
  cvs              Cv[]
  profile          Profile?
  refreshTokens    RefreshToken[]
  userKeys         UserKey[]

  @@map("users")
}

model Profile {
  id             String    @id @default(uuid())
  userId         String    @unique @map("user_id")
  fullName       String?   @map("full_name")
  phone          String?
  location       String?
  about          String?
  avatarUrl      String?   @map("avatar_url")
  skills         Json?
  experience     Json?
  education      Json?
  languages      Json?
  certifications Json?
  socialLinks    Json?     @map("social_links")
  lastParsedAt   DateTime? @map("last_parsed_at")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Cv {
  id                String        @id @default(uuid())
  userId            String        @map("user_id")
  originalFilename  String        @map("original_filename")
  s3Url             String        @map("s3_url")
  s3Key             String        @map("s3_key")
  mimeType          String        @map("mime_type")
  size              Int
  encryptedBlobMeta Json?         @map("encrypted_blob_meta")
  parsedJsonId      String?       @map("parsed_json_id")
  status            CvStatus      @default(UPLOADED)
  errorMessage      String?       @map("error_message")
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  applications      Application[]
  parsedResume      ParsedResume? @relation(fields: [parsedJsonId], references: [id])
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("cvs")
}

model ParsedResume {
  id          String   @id @default(uuid())
  cvId        String?  @map("cv_id")
  jsonPayload Json     @map("json_payload")
  skills      String[]
  positions   Json
  rawText     String?  @map("raw_text")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  cvs         Cv[]

  @@map("parsed_resumes")
}

model AiTask {
  id         String     @id @default(uuid())
  userId     String     @map("user_id")
  taskType   TaskType   @map("task_type")
  input      Json
  outputUrl  String?    @map("output_url")
  outputData Json?      @map("output_data")
  status     TaskStatus @default(PENDING)
  error      String?
  progress   Int        @default(0)
  createdAt  DateTime   @default(now()) @map("created_at")
  finishedAt DateTime?  @map("finished_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([taskType])
  @@map("ai_tasks")
}

model Job {
  id             String        @id @default(uuid())
  title          String
  company        String
  description    String
  location       String?
  sourceUrl      String?       @map("source_url")
  requiredSkills String[]      @map("required_skills")
  salary         String?
  jobType        String?       @map("job_type")
  postedAt       DateTime      @default(now()) @map("posted_at")
  expiresAt      DateTime?     @map("expires_at")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  applications   Application[]

  @@index([company])
  @@index([location])
  @@map("jobs")
}

model Application {
  id              String            @id @default(uuid())
  userId          String            @map("user_id")
  jobId           String            @map("job_id")
  cvId            String            @map("cv_id")
  coverLetterUrl  String?           @map("cover_letter_url")
  coverLetterText String?           @map("cover_letter_text")
  status          ApplicationStatus @default(DRAFT)
  notes           String?
  appliedAt       DateTime?         @map("applied_at")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  cv              Cv                @relation(fields: [cvId], references: [id])
  job             Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jobId])
  @@index([status])
  @@map("applications")
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?  @map("user_id")
  action    String
  meta      Json?
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model UserKey {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  encryptedKeyBlob String   @map("encrypted_key_blob")
  keyMetadata      Json?    @map("key_metadata")
  createdAt        DateTime @default(now()) @map("created_at")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_keys")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("refresh_tokens")
}

enum UserRole {
  CANDIDATE
  EMPLOYER
  ADMIN
}

enum CvStatus {
  UPLOADED
  PARSING
  PARSED
  FIXING
  FIXED
  ERROR
}

enum TaskType {
  PARSE
  FIX_CV
  COVER_LETTER
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  REVIEWED
  INTERVIEW
  OFFER
  ACCEPTED
  REJECTED
}
